import{j as l}from"./jsx-runtime-D_zvdyIk.js";import{r as I}from"./index-D4lIrffr.js";import{i as h,M as b,a as w,B as y,T as L}from"./isLeafNode-BynM3cPO.js";import{E as N}from"./EasyHighlight-CeowNmLs.js";function E(d){const{data:a,getNodeLabel:s,startAdornment:r,endAdornment:i,selectedId:u,onSelect:e,search:n,autoFocusItem:m}=d,f=I.useMemo(()=>{const t=a.filter(o=>h(o));return n==null||n===""?t:j(a,s,n)},[a,s,n]);return l.jsx(b,{autoFocusItem:m,children:f.map(t=>l.jsx(w,{selected:t.id===u,onClick:()=>{e?.(t)},children:l.jsx(y,{sx:{display:"flex",gap:1},children:[...t.pathId||[],t.id].map((o,c)=>{const p=a.find(x=>x.id===o),g=c===(t.pathId?.length||0);if(!p)return null;const T=s(p);return l.jsxs(y,{sx:{display:"flex",alignItems:"center",gap:1,flexGrow:1},children:[r?.(p,c),l.jsx(N,{text:T,search:n,focused:t.id===u}),i?.(p,c),!g&&l.jsx(L,{component:"div",color:"text.disabled",children:"/"})]},o)})})},t.id))})}function j(d,a,s){let r=[],i=[];return d.forEach(e=>{const m=a(e).includes(s),f=i.includes(e.id);if(m&&!f)if(h(e))r.push(e.id);else{const{leafNodeIds:o,allChildrenNodeIds:c}=q(d,e.id);r=r.concat([...o]),i=i.concat([...c])}}),[...new Set(r)].map(e=>d.find(m=>m.id===e))}function q(d,a){const s=[],r=[];function i(u){const e=d.find(n=>n.id===u);if(e){if(r.push(e.id),h(e)){s.push(e.id);return}e.childrenId?.forEach(n=>{i(n)})}}return i(a),{leafNodeIds:s,allChildrenNodeIds:r}}E.__docgenInfo={description:"",methods:[],displayName:"EasyFlatList",props:{search:{required:!1,tsType:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}]},description:"filter data and highlight the keyword"},selectedId:{required:!1,tsType:{name:"union",raw:"EasyId | null",elements:[{name:"union",raw:"number | string",elements:[{name:"number"},{name:"string"}]},{name:"null"}]},description:"leaf node only"},onSelect:{required:!1,tsType:{name:"signature",type:"function",raw:"(node: T | null) => void",signature:{arguments:[{type:{name:"union",raw:"T | null",elements:[{name:"T"},{name:"null"}]},name:"node"}],return:{name:"void"}}},description:"callback when select a node"},autoFocusItem:{required:!1,tsType:{name:"boolean"},description:"if true, will focus the selected item to enable keyboard navigation"},data:{required:!0,tsType:{name:"Array",elements:[{name:"T"}],raw:"T[]"},description:"all nodes data"},getNodeLabel:{required:!0,tsType:{name:"signature",type:"function",raw:"(node: T) => string",signature:{arguments:[{type:{name:"T"},name:"node"}],return:{name:"string"}}},description:"text to be displayed in the list"},startAdornment:{required:!1,tsType:{name:"signature",type:"function",raw:"(node: T, depth: number) => ReactNode",signature:{arguments:[{type:{name:"T"},name:"node"},{type:{name:"number"},name:"depth"}],return:{name:"ReactNode"}}},description:`start input adornment for the list
@param:
depth starts from 0
isLeaf is true if the node is a leaf node`},endAdornment:{required:!1,tsType:{name:"signature",type:"function",raw:"(node: T, depth: number) => ReactNode",signature:{arguments:[{type:{name:"T"},name:"node"},{type:{name:"number"},name:"depth"}],return:{name:"ReactNode"}}},description:`end input adornment for the list
@param:
depth starts from 0
isLeaf is true if the node is a leaf node`}}};export{E};
